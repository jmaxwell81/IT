<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>false</active>
        <add_message>true</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_291066_it_sreq</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message><![CDATA[<p><em style="font-size: 18.6667px;"><strong>A new Service Request was added successfully!!!!</strong></em></p>]]></message>
        <name>Update SREQ fields</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {	
	gs.info("CALLING THE BUSINESS RULE: CREATE SERVICE REQUEST!!!");	
	gs.info("BUSINESS RULE account = " + current.account);	
	gs.info("BUSINESS RULE site = " + current.site);		
	gs.info("BUSINESS RULE sreq_id = " + current.sreq_id);
	gs.info("BUSINESS RULE EXTERNAL ID = " + current.external_id);
	gs.info("BUSINESS RULE SYS ID = " + current.sys_id);
	
	var customFormManager = new CustomFormManager();
	customFormManager.getBreakFixValues(current.sys_id);
	customFormManager.getXML(getBreakFixValues);
	
	var breakFixValues = {};
	
	function getBreakFixValues(response) {
		if (response.status === 200) {
			breakFixValues = response.responseXML.documentElement.getAttribute("answer").evalJSON();
			gs.info("SUCCESSFULLY");
		} else {
			gs.info("ERROR!!");
		}
	}
	
	gs.info("BUSINESS RULE JSON = " + JSON.stringify(breakFixValues));
	
	var serviceRequestManager = new ServiceRequestManager();
	serviceRequestManager.updateServiceRequest(JSON.stringify(breakFixValues), current.sreq_id);
	serviceRequestManager.getXML(updateSREQ);
	
	function updateSREQ(response) {
		if (response.status === 200) {
			gs.info("UPDATED SUCCESSFULLY");
		} else {
			gs.info("ERROR WHEN A SREQ WAS UPDATIG!!");
		}
	}
	
	
// 	var sreqManager = new ServiceRequestManager();
// 	var external_id = current.external_id;
	
// 	if (external_id) {
// 		sreqManager.populateTheRestFields(external_id);
// 	}
})(current, previous);


































// (function executeRule(current, previous /*null when async*/) {	
// 	gs.info("CALLING THE BUSINESS RULE: CREATE SERVICE REQUEST!!!");	
// 	gs.info("BUSINESS RULE " + current.account);
// 	//gs.info("BUSINESS RULE " + previous.account);
// 	gs.info("BUSINESS RULE " + current.site);
// 	//gs.info("BUSINESS RULE " + previous.site);
// 	try {
// // 		var r = new sn_ws.RESTMessageV2('x_291066_it.CreateServiceRequest', 'Default POST');
// // 		var body = getValidInputFields(current);


// // 		if (Object.keys(body).length === 0 && body.constructor === Object){
// // 			throw "Some mandatory field is empty or null, Please check it";
// // 		}
// // 		r.setRequestHeader("Content-Type", "application/json");

// // 		r.setRequestBody(JSON.stringify(body));
// // 		var response = r.execute();		
// // 		var httpStatus = response.getStatusCode();
// // 		var bodyContent = response.getBody();

// // 		gs.info("STATUS CODE: " + httpStatus);		
// // 		gs.info("BODY: " + bodyContent);
// 	}
// 	catch(ex) {
// 		gs.error(ex);
// 	}
	
// })(current, previous);

// function getValidInputFields(current) {
	
// 	var account = current.account.toString();
// 	var task = current.task_type.toString();
// 	var site = current.site.toString();
// 	var summary = current.summary.toString();
// 	var body = {};
	
// 	if(account && task && site && summary) {
// 		body = {
// 			"account" : account,
// 			"task" : task,
// 			"site" : site,
// 			"summary" : summary
// 		};		
// 	}
// 	return body;
// }]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-11-19 23:31:09</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>d1fa1bfe4f7de300cd558c318110c782</sys_id>
        <sys_mod_count>37</sys_mod_count>
        <sys_name>Update SREQ fields</sys_name>
        <sys_overrides/>
        <sys_package display_value="IT" source="x_291066_it">ad98ba3a4f3de300cd558c318110c7ec</sys_package>
        <sys_policy/>
        <sys_scope display_value="IT">ad98ba3a4f3de300cd558c318110c7ec</sys_scope>
        <sys_update_name>sys_script_d1fa1bfe4f7de300cd558c318110c782</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-11-30 22:27:47</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=d1fa1bfe4f7de300cd558c318110c782"/>
</record_update>
